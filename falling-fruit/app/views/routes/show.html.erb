<%= render :partial => '/locations/searchbar' %>

<div id="directions_panel">
  <div id="travel_mode">
  <b><%= translate("routes.mode_of_travel") %></b>
  <select id="travel_mode_select" onchange="calculate_route(all_waypoints.slice(0));">
    <option value="WALKING"><%= translate("routes.modes_of_travel")[0] %></option>
    <option value="BICYCLING"><%= translate("routes.modes_of_travel")[1] %></option>
    <option value="DRIVING"><%= translate("routes.modes_of_travel")[2] %></option>
  </select>
  </div>
  <div id="directions">
    <ol id="directions_list">
    <% @route_locations.each{ |lr| %>
      <li>
          <%= hidden_field_tag('route_location_id',lr.id) %>
          <a href="#" onclick="open_marker_by_id(<%= lr.location.id %>);return false;" onmouseover="show_pointer(<%= lr.location.lat %>,<%= lr.location.lng %>);" onmouseout="hide_pointer();">
            <%= lr.location.title %>
          </a>
    <% } %>
    </ol>
  </div>
</div>
<div id="mainmap_container" style="left: 310px;">
  <div id="map"></div>
  <p id="stamen_attribution" style="display:none;">
    <%= translate("locations.index.stamen_html").html_safe %>
  </p>
</div>

<% content_for :page_scripts do %>
<%= render :partial => "/locations/map_includes" %>
<script type="text/javascript" charset="utf-8">

  // ================= globals ==================

  var directionsOverlays = [];
  var directionsService = new google.maps.DirectionsService();
  //var skip_ids = [<%= @route_locations.collect{ |lr| lr.location.id }.join(",") %>];
  var skip_ids = null;
  var route_step_ids = [<%= @route_locations.collect{ |l| l.location.id }.join(",") %>];
  var all_waypoints = [<%= @route_locations.collect{ |lr|
                     "{location: new google.maps.LatLng(#{lr.location.lat},#{lr.location.lng})}" }.join(",")
                %>];
  var type = google.maps.MapTypeId.ROADMAP;
  var travelMode = '<%= @route.transport_type %>';
  var bounds = new google.maps.LatLngBounds();
  <% @route_locations.each{ |lr| %>
    bounds.extend(new google.maps.LatLng(<%= lr.location.lat %>,<%= lr.location.lng %>));
  <% } %>
  type_filter = undefined;
  
  // ================= functions =================
  
  // Enable the visual refresh
  google.maps.visualRefresh = true;

  jQuery(document).ready(function(){
    $( "#directions_list" ).sortable({
      update: function(event,ui){
        var lrid = ui.item.find("#route_location_id").val();
        var pos = ui.item.index();
        window.location = '/routes/<%= @route.id %>/reposition?lrid=' + lrid + '&pos=' + pos;
      }
    });
    $( "#directions_list" ).disableSelection();
  });

  function initialize() {
    
    basemap(undefined,undefined,undefined,type,bounds);
    var zoom = map.getZoom();

    geocoder = new google.maps.Geocoder();

    google.maps.event.addListener(map, 'rightclick', function(event) {
      remove_add_marker();
      place_add_marker(event.latLng, '<%= translate("locations.index.addmarker_html") %>');
    });

    google.maps.event.addListenerOnce(map, 'tilesloaded', function(event) { 
      calculate_route(all_waypoints.slice(0));
    });
    
    google.maps.event.addListener(map, 'idle', function(){
        update_display(false);
        //var len = markersArray.length;
        // tries to discolor non-route points, but doesn't work when map is panned
        /*for (var i = 0; i < len; i++) {
          if (route_step_ids.indexOf(parseInt(markersArray[i].id)) == -1) {
            markersArray[i].marker.setZIndex(99);
            markersArray[i].marker.setIcon({url: "/icons/smdot_t1_white_a50.png", size: {width: 17, height: 17}, anchor: {x: 17*0.4, y: 17*0.4}});
          }
        }*/
    });
  }

  function create_renderer(){
    var directionsDisplay = new google.maps.DirectionsRenderer();
    directionsDisplay.setOptions({
      suppressMarkers: true,
      draggable: true,
      polylineOptions: {
        zIndex: 10,
        strokeColor: '#2d97ec',
        strokeOpacity: 0.8,
        strokeWeight: 6
      }
    });
    directionsDisplay.setMap(map);
    //directionsDisplay.setPanel(document.getElementById('directions'));
    return directionsDisplay;
  }

  function clear_directions(){
    for(var i = 0; i < directionsOverlays.length; i++){
      directionsOverlays[i].setMap(null);
    }
    directionsOverlays = [];
  }

  function calculate_route(waypoints) {
     if(waypoints.length < 2) return;
     travelMode = document.getElementById('travel_mode_select').value;
    clear_directions();
     var orig;
     var dest;
     var chunk = [];
     orig = waypoints.splice(0,1).shift();
     if(waypoints.length <= 8){
       if(waypoints.length > 1) chunk = waypoints.splice(0,waypoints.length-1);
       else chunk = [];
     }else{
       chunk = waypoints.splice(0,8);
     }
     dest = waypoints.splice(0,1).shift();
     while(chunk.length > 0 || waypoints.length > 0){
       var request = {
         origin: orig.location,
         destination: dest.location,
         waypoints: chunk,
         travelMode: google.maps.TravelMode[travelMode]
       };
       // Route the directions and pass the response to a
       // function to create markers for each step.
       directionsService.route(request, function(response, status) {
         var directionsDisplay = create_renderer();
         directionsOverlays.push(directionsDisplay);
         if (status == google.maps.DirectionsStatus.OK) {
           directionsDisplay.setDirections(response);
         } else {
           directionsDisplay.setDirections(response);
         }
         //var warnings = document.getElementById('warnings_panel');
         //warnings.innerHTML = '<b>' + response.routes[0].warnings + '</b>';
       });
       orig = dest;
       if(waypoints.length <= 8){
         if(waypoints.length > 1) chunk = waypoints.splice(0,waypoints.length-1);
         else chunk = [];
       }else{
         chunk = waypoints.splice(0,8);
       }
       dest = waypoints.splice(0,1).shift();
     }
   }


  // ================== main-level code ===================

  $("#travel_mode_select").val(travelMode);
  google.maps.event.addDomListener(window, 'load', initialize);

  // hide the 'zoom to me' button if browser isn't supporting geolocation
  if(!navigator.geolocation){
    $('#recenter_button').hide();
  }
  navigator.geolocation.getCurrentPosition(function(position){},function(error){
    $('#recenter_button').hide();
  });
  
</script>
<%= javascript_include_tag "maplabel" %>
<%= javascript_include_tag "progressBar" %>
<%= javascript_include_tag "richmarker" %>
<%= javascript_include_tag "mapcommon" %>
<%= javascript_include_tag "mainmap" %>
<% end %>
